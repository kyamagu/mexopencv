#
# AppVeyor CI build script.
# https://ci.appveyor.com/project/kyamagu/mexopencv
#
# Note:
# Due to the time limit on AppVeyor, OpenCV 3.1.0 is pre-built separately
# (using the same configuration with MinGW-GCC from Octave). See:
# https://github.com/amroamroamro/opencv/blob/tag_3.1.0/appveyor.yml
#

# version format
version: 3.1.0.{build}

# clone directory
clone_folder: c:\projects\mexopencv

# whitelisted branches to build
branches:
  only:
  - master

# global environment variables
environment:
  MCV_ROOT: c:\projects\mexopencv
  OPENCV_DIR: c:\dev\build\install
  #NOTE: it's important to set OCTAVE_HOME environment variable because it is
  # queried by mkoctfile.exe/octave-config.exe to alter compile and link paths
  # (otherwise some wrong hardcoded paths from cross-compiling are used)
  # http://savannah.gnu.org/bugs/?48671
  OCTAVE_HOME: c:\dev\octave-4.0.3
  #TODO: https://savannah.gnu.org/bugs/?41699
  # we use octave-cli.exe here instead of octave.exe because of a bug
  # in the MinGW/MXE build causing Octave to crash on exit with a segfault
  # after having used any GraphicsMagick functions (imread, etc..).
  # Even then, we can't always trust Octave's exit code on Windows! It throws
  # 0xC0000005 on exit (access violation), even when it runs just fine.
  #TODO: The YAML parser report errors if we use % as first char in a command,
  # so we cannot just write %OCTAVE%, we must use: call %OCTAVE%
  OCTAVE: octave-cli --no-gui --no-window-system
  # whether to generate doxygen HTML documentation
  DOXY: yes
  # for pkg-config to find opencv.pc when using the makefile
  PKG_CONFIG_PATH: /c/dev/build/install
  # whether to run mexopencv.make() in Octave or use external makefile
  WITH_MAKE: yes
  # options in case of makefile (the quotes around the path are needed here!)
  MAKE_OPTS: MATLABDIR='/c/dev/octave-4.0.3' WITH_OCTAVE=true WITH_CONTRIB=true NO_CV_PKGCONFIG_HACK=true
  # Extra make arguments like number of parallel jobs (NPROC+1 is recommended).
  # Note that GNU Make 3.81 bundled with Octave has poor parallel jobs support
  # (make -jN freezes, make -j has no limit creating way too many processes!).
  # So we download a newer GNU Make 4.1 for Windows (mingw32-make -jN works).
  MAKE_EXTRA: -j2

# immediately finish build if one of the jobs fails
matrix:
  fast_finish: true

# disable automatic building/testing/deploying phases, we use custom scripts
build: off
test: off
deploy: off

# keep build artifacts, which can be downloaded later
artifacts:
  - path: test\UnitTest_*.log
    name: tests-log

# enable debugging using an RDP connection
#on_finish:
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

install:
  # download and install dependencies
  - if not exist "c:\dev" ( mkdir "c:\dev" )
  - cd "c:\dev"
  - if "%DOXY%" == "yes" ( choco install doxygen.portable -y )
  - ps: Start-FileDownload "https://github.com/amroamroamro/opencv/releases/download/3.1.0/mingw32-make.exe" -FileName mingw32-make.exe
  - set "PATH=c:\dev;%PATH%"
  - ps: Start-FileDownload "https://github.com/amroamroamro/opencv/releases/download/3.1.0/cv310_x86_gcc493.7z" -FileName cv310_x86_gcc493.7z
  - 7z x "c:\dev\cv310_x86_gcc493.7z" -o"c:\dev\build" -y > nul
  - set "PATH=%OPENCV_DIR%\x86\mingw\bin;%PATH%"
  - ps: Start-FileDownload "https://ftp.gnu.org/gnu/octave/windows/octave-4.0.3.zip" -FileName octave-4.0.3.zip
  - 7z x "c:\dev\octave-4.0.3.zip" -o"c:\dev" -y > nul
  - copy /y "%OCTAVE_HOME%\bin\libopenblas.dll" "%OCTAVE_HOME%\bin\libblas.dll" > nul
  - set "PATH=%OCTAVE_HOME%\bin;%PATH%"
  - call %OCTAVE% --eval "try, pkg('rebuild', '-noauto'); end"
  # show info about build tools
  #- dir "c:\dev"
  #- set
  #- ver
  #- systeminfo
  - mingw32-make --version
  - g++ --version
  - call %OCTAVE% --version
  - call %OCTAVE% --eval "pkg list"
  - if "%DOXY%" == "yes" ( doxygen --version )

before_build:
  # create .octaverc file (where we setup path and load required packages on start)
  #TODO: http://savannah.gnu.org/bugs/?45444, we also add private directories on path
  - ps: |
      $OctaveRC = @"
        crash_dumps_octave_core(false);
        more off
        try, pkg load statistics, end
        try, pkg load image, end
        warning('off', 'Octave:GraphicsMagic-Quantum-Depth');
        warning('off', 'Octave:shadowed-function');
        cd(getenv('MCV_ROOT'));
        addpath(getenv('MCV_ROOT'));
        addpath(fullfile(getenv('MCV_ROOT'),'+cv','private'));
        addpath(fullfile(getenv('MCV_ROOT'),'opencv_contrib'));
        addpath(fullfile(getenv('MCV_ROOT'),'opencv_contrib','+cv','private'));
      "@
      # one for SHELL=sh.exe and one for SHELL=cmd.exe
      $HomeDirs = @(
        (Join-Path (Join-Path $env:OCTAVE_HOME 'home') $env:USERNAME),
        $env:USERPROFILE
      )
      $HomeDirs | ForEach-Object {
        $OctaveRCFile = (Join-Path $_ '.octaverc')
        New-Item -ItemType File -Path "$OctaveRCFile" -Force | Out-Null
        $OctaveRC | Out-File -FilePath "$OctaveRCFile" -Encoding ASCII
      }
      cat "$OctaveRCFile"

build_script:
  # compile mexopencv
  - cd "%MCV_ROOT%"
  - if "%WITH_MAKE%" == "yes" (
      sh --login -c "cd \"$MCV_ROOT\" && mingw32-make $MAKE_OPTS $MAKE_EXTRA all contrib"
    ) else (
      %OCTAVE% --eval "mexopencv.make('opencv_path',getenv('OPENCV_DIR'), 'opencv_contrib',true, 'progress',false, 'verbose',1);"
    )
  # generate HTML docs
  - if "%DOXY%" == "yes" ( doxygen Doxyfile )

after_build:
  # package all built MEX-files in a zip file
  - pushd "%MCV_ROOT%" && 7z a -t7z "%APPVEYOR_BUILD_FOLDER%\mexopencv.7z" *.mex -r -y > nul && popd
  - appveyor PushArtifact "%APPVEYOR_BUILD_FOLDER%\mexopencv.7z" -DeploymentName "binaries_octave_x86"
  # package HTML docs
  - if "%DOXY%" == "yes" ( 7z a -t7z "%APPVEYOR_BUILD_FOLDER%\mexopencv_doc.7z" "%MCV_ROOT%\doc\html\" -y > nul )
  - if "%DOXY%" == "yes" ( appveyor PushArtifact "%APPVEYOR_BUILD_FOLDER%\mexopencv_doc.7z" -DeploymentName "docs-cpp" )

before_test:
  # print cv build info
  - call %OCTAVE% --eval "path, disp(cv.getBuildInformation())"

test_script:
  # run test suite
  #TODO: we reset %ERRORLEVEL% because we can't rely on Octave exit code
  - if "%WITH_MAKE%" == "yes" (
      sh --login -c "cd \"$MCV_ROOT\" && mingw32-make $MAKE_OPTS test"
    ) else (
      %OCTAVE% --eval "cd test;try,UnitTest(true);catch e,disp(e);exit(1);end;exit(0);" || ver > nul
    )
